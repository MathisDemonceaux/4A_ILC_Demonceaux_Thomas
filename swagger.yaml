swagger: '2.0'
info:
  version: 1.2.2
  title: Transactions API
  description: An API for managing transactions between people.
host: localhost:3000
basePath: /
schemes:
  - http
paths:
  /:
    get:
      summary: Get all transactions sorted by timestamp
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
  /personnes:
    get:
      summary: Get all people
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne'
    post:
      summary: Create a new person
      parameters:
        - name: personne
          in: body
          required: true
          schema:
            type: object
            properties:
              nom:
                type: string
                example: Doe
              prenom:
                type: string
                example: John
              solde:
                type: integer
                example: 534.2
      responses:
        201:
          description: Success
          schema:
            $ref: '#/definitions/Personne'
  /personnes/{idPersonne}:
    delete:
      summary: Delete a person
      parameters:
        - name: idPersonne
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne'
        404:
          description: Not found
          schema:
            type: string
            example: La personne n'existe pas
  /transactions:
    get:
      summary: Get all transactions
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
    post:
      summary: Create a new transaction
      parameters:
        - name: transaction
          in: body
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        201:
          description: Success
          schema:
            $ref: '#/definitions/Transaction'
        403:
          description: Not enough money
          schema:
            type: string
            example: La personne P1 n'a pas assez d'argent
  /transactions/{idPersonne}:
    get:
      summary: Get transactions for a specific person (sorted by date)
      parameters:
        - name: idPersonne
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
  /soldePersonne/{idPersonne}:
    get:
      summary: Get the current balance of a specific person
      parameters:
        - name: idPersonne
          in: path
          required: true
          type: integer
      responses:
        200:
          description: Success
          schema:
            type: integer
            example: 534.2
  /verifierTransaction:
    post:
      summary: Verify the hash of a transaction
      parameters:
        - name: personne
          in: body
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      responses:
        200:
          description: Success
          schema:
            type: string
            example: La transaction est valide
        400:
          description: Hash invalid
          schema:
            type: string
            example: La transaction est invalide
  /importPersonnes:
    post:
      summary: Post a CSV file to import people in the database
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: "The CSV file, with these columns: id,nom,prenom,solde"
          required: true
          type: file
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Personne'
  /importTransactions:
    post:
      summary: Post a CSV file to import transactions in the database
      consumes:
        - multipart/form-data
      parameters:
        - name: file
          in: formData
          description: "The CSV file, with these columns: P1,P2,t,s"
          required: true
          type: file
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/Transaction'
definitions:
  Transaction:
    type: object
    properties:
      P1:
        type: integer
        example: 1
      P2:
        type: integer
        example: 2
      t:
        type: integer
        example: 1675198971907
      s:
        type: number
        example: 32.5
      h:
        type: string
        example: 3938803314ab277e942720e9689f9af48d258551d407290e6017797efa731ef4
  Personne:
    type: object
    properties:
      id:
        type: integer
        example: 1
      nom:
        type: string
        example: Doe
      prenom:
        type: string
        example: John
      solde:
        type: number
        example: 534.2